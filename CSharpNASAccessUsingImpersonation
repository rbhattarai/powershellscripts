using System;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Security.Principal;
using Microsoft.Win32.SafeHandles;

public class Impersonation : IDisposable
{
    private readonly SafeAccessTokenHandle _safeAccessTokenHandle;
    private readonly WindowsIdentity _windowsIdentity;
    private readonly WindowsImpersonationContext _windowsImpersonationContext;

    public Impersonation(string domain, string username, string password)
    {
        bool returnValue = LogonUser(username, domain, password,
            Logon32LogonInteractive, Logon32ProviderDefault, out _safeAccessTokenHandle);

        if (!returnValue)
        {
            int ret = Marshal.GetLastWin32Error();
            throw new Win32Exception(ret);
        }

        _windowsIdentity = new WindowsIdentity(_safeAccessTokenHandle.DangerousGetHandle());
        _windowsImpersonationContext = _windowsIdentity.Impersonate();
    }

    public void Dispose()
    {
        _windowsImpersonationContext?.Undo();
        _safeAccessTokenHandle?.Dispose();
        _windowsIdentity?.Dispose();
    }

    private const int Logon32LogonInteractive = 2;
    private const int Logon32ProviderDefault = 0;

    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Auto)]
    private static extern bool LogonUser(string lpszUsername, string lpszDomain, string lpszPassword,
        int dwLogonType, int dwLogonProvider, out SafeAccessTokenHandle phToken);
}


//Usage:
using System;
using System.Collections.Generic;
using System.IO;

public class FileDetailsFetcher
{
    public Dictionary<string, string> GetFileDetailsFromNASLocation(string folder, string domain, string username, string password)
    {
        var fileDetails = new Dictionary<string, string>();
        string folderNAS = @"\\com.company\nas\project\" + folder;

        using (new Impersonation(domain, username, password))
        {
            DirectoryInfo d = new DirectoryInfo(folderNAS);
            d.Refresh();
            var files = d.GetFiles("*.*");
            foreach (var file in files)
            {
                fileDetails.Add(file.Name, file.LastWriteTime.ToString("yyyy-MM-dd HH:mm"));
            }
        }

        return fileDetails;
    }
}
